

Στα άρθα  : 2,4,5,7,8

readString:				
					#Κάθε φορά που καλούμαι μια συνάρτηση γινόνται τα εξής 3 πράματα :	
	push   %ebp			# push % ebp                      *ebp := points to the base of Stack Frame		  	
   	mov    %esp,%ebp		# mov %esp , % ebp    : %..bp <-- %..sp
   	sub    $0x34,%esp		# sub X , %esp        : X := Size of local Variables = 34
   					# ..sp <-- ..sp - 34   

	movl   $0x0,-0x4(%ebp)		# i=0       ....    Stack[(%ebp)-4] <-- 0  
   	
	mov    0x80d4b44,%eax		# c = fgetc(stdin); 
					# %eax <-- loopne :    (Ειναι μια loop κατα την εισάγοναι δεδομένα απο το stdin)
				       	#	     or     $0x8,%eax
   					#	     add    %al,(%eax) ...%al:It is used for I/O port access, arithmetic, interrupt calls
					#			...
					#	     add    %bh,%bh            ... Base register
   					#	     <may_shrink_heap.7495+1>:	(bad) 					
					#	
	push   %eax			# push %eax 
   	call   0x8050850 <getc>         #
   	add    $0x4,%esp                # ..sp <-- ..sp + 4 
   	mov    %eax,-0x8(%ebp)          #  MEM[base_frame - 8] <-- (%eax) ... return  a unsigned char
   
	
	cmpl   $0xffffffff,-0x8(%ebp)	# if ((c == EOF) || (c == '\n'))
   	je     0x8048ae8 <readString+60>#           break 
   	cmpl   $0xa,-0x8(%ebp)          #
	je     0x8048ae8 <readString+60>#
   	
	
					# buf[i++] = c;
	mov    -0x4(%ebp),%eax		# %eax <-- i 
   	lea    0x1(%eax),%edx           # %edx <-- i+1
   	mov    %edx,-0x4(%ebp)		# i <-- i+1
   	mov    -0x8(%ebp),%edx		# %edx <-- input
   	mov    %dl,-0x34(%ebp,%eax,1)   # buff [ i++] <-- input 
   	jmp    0x8048ab9 <readString+13># .....GO TO While....
  	
	#  <readString+60> :		# buf [i] <-- 0
	lea    -0x34(%ebp),%edx         # % edx <-- Base_of_buf		
  	mov    -0x4(%ebp),%eax          # % eax <--  i
   	add    %edx,%eax		# %eax <-- Base_of_buf + offset ... buf[i]
   	movb   $0x0,(%eax)              # %eax <-- 0
	

	movl   $0x0,-0x4(%ebp)           #   i = 0 
  	jmp    0x8048b15 <readString+105>#
   	
	# <readString+80> :		# s[i] = buf[i];
	mov    -0x4(%ebp),%edx		# %edx <-- i
  	mov    0x8(%ebp),%eax		# %eax <-- Name
   	add    %eax,%edx		# %edx <-- Name + i .... s[i]
  	lea    -0x34(%ebp),%ecx         # %ecx <-- buf_base
   	mov    -0x4(%ebp),%eax          # %eax <-- i
   	add    %ecx,%eax		# %eax <-- buf_base + i ... buf[i]
   	movzbl (%eax),%eax		# buf[i] = s[i]
   	mov    %al,(%edx)		#
   	addl   $0x1,-0x4(%ebp)		# i <-- i + 1

        # <readString+105> : 
   	cmpl   $0x2b,-0x4(%ebp)		# if (BUFSIZE < i )  go to <readString+80>
   	jle    0x8048afc <readString+80>
	nop
   	leave  
   	ret
    
    <main>:	
	push   %ebp				# Δημιουργία του Stack Frame της διαδικασίας main()
   	mov    %esp,%ebp
   	
	mov    $0x80d65e0,%eax                  #  mprotect((void*)((unsigned int)Name & 0xfffff000), 1,
   	and    $0xfffff000,%eax                 #  	            PROT_READ | PROT_WRITE | PROT_EXEC);
   	push   $0x7				# 
   	push   $0x1				#
   	push   %eax				#	
  	call   0x805e180 <mprotect>             #
   	

	add    $0xc,%esp                        #printf("What is your name?\n");
   	push   $0x80ab0a8			#      readString(Name); 		#addr_Name = $0x80ab0a8 
   	call   0x804f070 <puts>                 #
   	
	add    $0x4,%esp			# readString(Name);
   	push   $0x80d65e0			#
   	call   0x8048aac <readString>		#
   	
	add    $0x4,%esp			# if (strcmp(Name, "Angelos Bilas") == 0)
   	push   $0x80ab0bb			#    grade = '6';      
  	push   $0x80d65e0
   	call   0x805af90 <strcmp>
   	add    $0x8,%esp			
  	test   %eax,%eax			# test eax, eax  ; set ZF to 1 if eax < 0 (negative)
	jne    0x8048b6f <main+81>              #  jne error      ; jump if SF == 1
   	movb   $0x36,0x80d46e8                  # "SOS :  0x80d46e8 <grade>":	xor    (%eax),%eax ..Destination = Destination ^ Source;
						# 		grade = '6'

	push   $0x80d65e0			#   printf("Thank you, %s.\n", Name);
   	push   $0x80ab0c9			#
   	call   0x804eaf0 <printf>      		#
  
 	add    $0x8,%esp			#printf("I recommend that you get a grade of %c on this assignment.\n",grade);
   	movzbl 0x80d46e8,%eax			#
   	movsbl %al,%eax				#
   	push   %eax				#
   	push   $0x80ab0dc			#
	call   0x804eaf0 <printf>		#
   	
	add    $0x8,%esp
   	push   $0x0
   	call   0x804e110 <exit>


Data Segment:                                        1 Byte                                                 
		|-------------|-------------|-------------------------|
 MS = 0x80d46ef |             |	   ...      | grade = '3'  ... 51     | 0x80d46e8 = LS		
     	        |-------------|-------------|-------------------------|

*Intel : little -Endian
 RAM : 64 bit ... 8 Bytes

print &grade ===>  $1 = 0x80d46e8 <grade> "3"
print grade  ===>  $2 = 51 '3'               ... η τιμή του grade ειναι αποθηκεύμενη στο $2


BSS Segment:

"Προσοχή" : Η αναπαράστατη στο GDB είναι LS ---> MS

 x/50b 0x80d65e0:       LS                                                      MS                                                     
                     <Name+0>
0x80d65e0 <Name>:	0	0	0	0	0	0	0	0   
0x80d65e8 <Name+8>:	0	0	0	0	0	0	0	0
0x80d65f0 <Name+16>:	0	0	0	0	0	0	0	0
0x80d65f8 <Name+24>:	0	0	0	0	0	0	0	0
0x80d6600 <Name+32>:	0	0	0	0	0	0	0	0
0x80d6608 <Name+40>:	0	0	0	0 <--- <Name+43>

	BUFFSIZE = 44 Bytes	

Stack Frame :

Διαβάζοντας των κώδικα καταλαμβαίβουμε οτι το Stack έχει την εξής μορφή: 
		|               | 
		|---------------|
0xffffcf68	|    buf[0]     | <--- esp   / ebp-34 ...Base of Array    
		|---------------|
		|       ...     |
		|---------------|
		| 	        |  
		|---------------|
0xffffcf94	|        c      |  <--- ebp - 8
		|---------------|
0xffffcf98	|        i      |  <--- ebp - 4
		|---------------|
	        |      ebp      |         
 0xffffcf9c	|---------------| <---  ebp_readString 
 	   	|   0xffffcfa8  | <---- ebp_main    
 0xffffcfa0	|---------------|
		|R.A.: 0x8048b4f| 
      		|      <main+49>| <----  Αποθηκεύεται οταν καλείται η ret
		|---------------|
    0xffffcfa4  |   0x80d65e0   |  <--- Argument of ReadString 
 		|    <Name>     |
		|---------------|
0xffffcfa8      |               |  <---  ebp_main 
		|---------------|
0xffffcfac      |      R.A.     |  <--- "return address of main()"
		|---------------|
		



Πιο συγκεκριμενα , εκτελόντας τις εντολές:
(gdb) break 26
      run
      What is your name?          ====>        gregorypapapostoloutem1667assignment6HY25519   .. size =43

(gdb) print $esp                  ====>        $1 = (void *) 0xffffcf68
(gdb) print $ebp		  ====>	       $2 = (void *) 0xffffcf9c
			          # Υπολογίζω την διαφορα :  9c - 68 = 53 Bytes		                              		
(gdb) x/53b $esp :
	 
0xffffcf68:	103	114	101	103	111	114	121	112

0xffffcf70:	97	112	97	112	111	115	116	111

0xffffcf78:	108	111	117	116	101	109	49	54

0xffffcf80:	54	55	97	115	115	105	103	110

0xffffcf88:	109	101	110	116	54	72	89	50

0xffffcf90:	53	53	49	57      |0 |	0	0	0
				     (buf[42]) 	----
						 [c]	
0xffffcf98:    |44	0	0	0|    |-88     .... 
                ------------------------       ------------   
			[i]			     [ebp]	


(gdb) print $ebp+4           .....          $6 = (void *) 0xffffcfa0


